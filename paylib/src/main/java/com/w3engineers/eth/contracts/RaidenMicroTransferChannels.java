package com.w3engineers.eth.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint192;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class RaidenMicroTransferChannels extends Contract {
    private static final String BINARY = "606060405234156200001057600080fd5b60405162003d4c38038062003d4c83398101604052808051906020019091908051906020019091908051820191905050600062000060620002ac640100000000026200343e176401000000009004565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060008373ffffffffffffffffffffffffffffffffffffffff16141515156200012557600080fd5b6200014483620002b4640100000000026200342b176401000000009004565b15156200015057600080fd5b6101f48263ffffffff16101515156200016857600080fd5b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156200023a57600080fd5b6102c65a03f115156200024c57600080fd5b505050604051805190501115156200026357600080fd5b81600060146101000a81548163ffffffff021916908363ffffffff160217905550620002a381620002c76401000000000262001eb7176401000000009004565b505050620004a1565b600033905090565b600080823b905060008111915050919050565b6000620002e76200042d6401000000000262002013176401000000009004565b1515620002f357600080fd5b600090505b815181101562000429576200033982828151811015156200031557fe5b90602001906020020151620002b4640100000000026200342b176401000000009004565b156200041b5760016004600084848151811015156200035457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508181815181101515620003be57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167fe2ad9d0600e2a93ef46991efd2c22f65f9ebe472487cc7551647bc52d79328996001604051808215151515815260200191505060405180910390a25b8080600101915050620002f8565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662000485620002ac640100000000026200343e176401000000009004565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b61389b80620004b16000396000f3006060604052361561015d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063016a8cf6146101625780630a00840c146101cd5780630eba6b06146102025780631ac25e99146103495780631c6f609b146104375780631d8ceb44146104ca5780631f52cc35146105b857806322a3eab514610612578063323cb59b1461068157806343d726d6146106ec57806354fd4d50146107015780635a8e9d661461078f5780636108b5ff146107d757806377c133231461080057806379694f08146108825780637a7ebd7b1461090c578063803c83831461098e5780638c76b4b714610a115780638da5cb5b14610a6b5780638f32d59b14610ac0578063990030cc14610aed578063a6b7fa3614610b3e578063a6d1596314610b9e578063c0ee0b8a14610bfa578063f2fde38b14610c50578063fc0c546a14610c89578063fcff5ed614610cde575b600080fd5b341561016d57600080fd5b6101cb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803563ffffffff1690602001909190803577ffffffffffffffffffffffffffffffffffffffffffffffff16906020019091905050610d59565b005b34156101d857600080fd5b6101e0610eab565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b341561020d57600080fd5b610267600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803563ffffffff16906020019091905050610ec1565b6040518086600019166000191681526020018577ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff1663ffffffff1681526020018377ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020018277ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390f35b341561035457600080fd5b6103f5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803563ffffffff1690602001909190803577ffffffffffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611026565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561044257600080fd5b6104c8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803563ffffffff1690602001909190803577ffffffffffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190820180359060200191909192908035906020019082018035906020019190919290505061127e565b005b34156104d557600080fd5b610576600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803563ffffffff1690602001909190803577ffffffffffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611352565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105c357600080fd5b6106106004808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506115aa565b005b341561061d57600080fd5b610637600480803560001916906020019091905050611721565b604051808277ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561068c57600080fd5b6106ea600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803563ffffffff1690602001909190803577ffffffffffffffffffffffffffffffffffffffffffffffff16906020019091905050611758565b005b34156106f757600080fd5b6106ff611a10565b005b341561070c57600080fd5b610714611a5d565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610754578082015181840152602081019050610739565b50505050905090810190601f1680156107815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561079a57600080fd5b6107d5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803563ffffffff16906020019091905050611a96565b005b34156107e257600080fd5b6107ea611b7d565b6040518082815260200191505060405180910390f35b341561080b57600080fd5b610825600480803560001916906020019091905050611b8a565b604051808377ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1663ffffffff1681526020019250505060405180910390f35b341561088d57600080fd5b61090a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803563ffffffff1690602001909190803577ffffffffffffffffffffffffffffffffffffffffffffffff16906020019091905050611be2565b005b341561091757600080fd5b610931600480803560001916906020019091905050611d8d565b604051808377ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1663ffffffff1681526020019250505060405180910390f35b341561099957600080fd5b6109f3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803563ffffffff16906020019091905050611de5565b60405180826000191660001916815260200191505060405180910390f35b3415610a1c57600080fd5b610a69600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611eb7565b005b3415610a7657600080fd5b610a7e611fea565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610acb57600080fd5b610ad3612013565b604051808215151515815260200191505060405180910390f35b3415610af857600080fd5b610b24600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612071565b604051808215151515815260200191505060405180910390f35b3415610b4957600080fd5b610b9c600480803563ffffffff1690602001909190803577ffffffffffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190820180359060200191909192905050612091565b005b3415610ba957600080fd5b610bf8600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803577ffffffffffffffffffffffffffffffffffffffffffffffff169060200190919050506124f3565b005b3415610c0557600080fd5b610c4e600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919080359060200190820180359060200191909192905050612643565b005b3415610c5b57600080fd5b610c87600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061286e565b005b3415610c9457600080fd5b610c9c61288d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610ce957600080fd5b610d57600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803577ffffffffffffffffffffffffffffffffffffffffffffffff169060200190919050506128b3565b005b610d6533848484612a5c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018277ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b1515610e8057600080fd5b6102c65a03f11515610e9157600080fd5b505050604051805190501515610ea657600080fd5b505050565b600060149054906101000a900463ffffffff1681565b600080600080600080610ed5898989611de5565b9050600060026000836000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff16111515610f1a57600080fd5b8060026000836000191660001916815260200190815260200160002060000160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1660036000846000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1660036000856000191660001916815260200190815260200160002060000160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1660056000866000191660001916815260200190815260200160002060009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff169550955095509550955050939792965093509350565b600080600060405180807f737472696e67206d6573736167655f6964000000000000000000000000000000815250601101807f6164647265737320726563656976657200000000000000000000000000000000815250601001807f75696e74333220626c6f636b5f63726561746564000000000000000000000000815250601401807f75696e743139322062616c616e63650000000000000000000000000000000000815250600f01807f6164647265737320636f6e747261637400000000000000000000000000000000815250601001905060405180910390208787873060405180807f53656e6465722062616c616e63652070726f6f66207369676e61747572650000815250601e018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018463ffffffff1663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018377ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16680100000000000000000281526018018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140194505050505060405180910390206040518083600019166000191681526020018260001916600019168152602001925050506040518091039020915061126f8285612d5b565b90508092505050949350505050565b6000806112bf89898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611026565b91506112ff82898987878080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611352565b90508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561133b57600080fd5b61134782828a8a612e77565b505050505050505050565b600080600060405180807f737472696e67206d6573736167655f6964000000000000000000000000000000815250601101807f616464726573732073656e646572000000000000000000000000000000000000815250600e01807f75696e74333220626c6f636b5f63726561746564000000000000000000000000815250601401807f75696e743139322062616c616e63650000000000000000000000000000000000815250600f01807f6164647265737320636f6e747261637400000000000000000000000000000000815250601001905060405180910390208787873060405180807f526563656976657220636c6f73696e67207369676e6174757265000000000000815250601a018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018463ffffffff1663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018377ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16680100000000000000000281526018018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140194505050505060405180910390206040518083600019166000191681526020018260001916600019168152602001925050506040518091039020915061159b8285612d5b565b90508092505050949350505050565b60006115b4612013565b15156115bf57600080fd5b600090505b815181101561171d576004600083838151811015156115df57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561171057600060046000848481518110151561164a57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081818151811015156116b357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167fe2ad9d0600e2a93ef46991efd2c22f65f9ebe472487cc7551647bc52d79328996000604051808215151515815260200191505060405180910390a25b80806001019150506115c4565b5050565b60056020528060005260406000206000915054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1681565b6000611765338585611de5565b9050600060026000836000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff161115156117aa57600080fd5b600060036000836000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff161415156117ed57600080fd5b60026000826000191660001916815260200190815260200160002060000160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff168277ffffffffffffffffffffffffffffffffffffffffffffffff161115151561187257600080fd5b600060149054906101000a900463ffffffff16430160036000836000191660001916815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff1602179055504360036000836000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff1611151561190557600080fd5b8160036000836000191660001916815260200190815260200160002060000160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055508263ffffffff168473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f960e55a871be40c817ffd64e2117c513e42f047ccfdcbc5454e68dfc65e9a9b085604051808277ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a450505050565b611a18612013565b1515611a2357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6040805190810160405280600581526020017f302e322e3000000000000000000000000000000000000000000000000000000081525081565b6000611aa3338484611de5565b9050600060036000836000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff16111515611ae857600080fd5b60036000826000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff1643111515611b2a57600080fd5b611b7833848460036000866000191660001916815260200190815260200160002060000160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16612e77565b505050565b68056bc75e2d6310000081565b60036020528060005260406000206000915090508060000160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16908060000160189054906101000a900463ffffffff16905082565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611c3a57600080fd5b611c4684848484612a5c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018277ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b1515611d6157600080fd5b6102c65a03f11515611d7257600080fd5b505050604051805190501515611d8757600080fd5b50505050565b60026020528060005260406000206000915090508060000160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16908060000160189054906101000a900463ffffffff16905082565b6000838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018263ffffffff1663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004019350505050604051809103902090509392505050565b6000611ec1612013565b1515611ecc57600080fd5b600090505b8151811015611fe657611efa8282815181101515611eeb57fe5b9060200190602002015161342b565b15611fd9576001600460008484815181101515611f1357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508181815181101515611f7c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167fe2ad9d0600e2a93ef46991efd2c22f65f9ebe472487cc7551647bc52d79328996001604051808215151515815260200191505060405180910390a25b8080600101915050611ed1565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661205561343e565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b60046020528060005260406000206000915054906101000a900460ff1681565b6000806000808677ffffffffffffffffffffffffffffffffffffffffffffffff161115156120be57600080fd5b6120fc33888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050611026565b9250612109833389611de5565b9150600060026000846000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff1611151561214e57600080fd5b600060036000846000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff1614151561219157600080fd5b60026000836000191660001916815260200190815260200160002060000160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff168677ffffffffffffffffffffffffffffffffffffffffffffffff161115151561221657600080fd5b8577ffffffffffffffffffffffffffffffffffffffffffffffff1660056000846000191660001916815260200190815260200160002060009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1610151561229757600080fd5b60056000836000191660001916815260200190815260200160002060009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16860390508560056000846000191660001916815260200190815260200160002060006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018277ffffffffffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b151561242457600080fd5b6102c65a03f1151561243557600080fd5b50505060405180519050151561244a57600080fd5b8663ffffffff163373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fe588a2bb9921c62e0da981f10952a3bb82216bf11a1f731da610fd2542eef27d84604051808277ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a450505050505050565b6124fe338383613446565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018277ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b151561261957600080fd5b6102c65a03f1151561262a57600080fd5b50505060405180519050151561263f57600080fd5b5050565b6000806000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126a757600080fd5b879450878577ffffffffffffffffffffffffffffffffffffffffffffffff161415156126d257600080fd5b86869050935060288414806126e75750602c84145b15156126f257600080fd5b61272f87878080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505060206136e5565b92508273ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614806127b45750600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156127bf57600080fd5b6127fc87878080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505060346136e5565b9150602884141561281757612812838387613446565b612863565b61285487878080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506048613708565b905061286283838388612a5c565b5b505050505050505050565b612876612013565b151561288157600080fd5b61288a8161373b565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561290b57600080fd5b612916838383613446565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018277ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b1515612a3157600080fd5b6102c65a03f11515612a4257600080fd5b505050604051805190501515612a5757600080fd5b505050565b6000808277ffffffffffffffffffffffffffffffffffffffffffffffff16111515612a8657600080fd5b60008363ffffffff16111515612a9b57600080fd5b612aa6858585611de5565b9050600060026000836000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff16111515612aeb57600080fd5b600060036000836000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff16141515612b2e57600080fd5b68056bc75e2d631000008260026000846000191660001916815260200190815260200160002060000160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff160177ffffffffffffffffffffffffffffffffffffffffffffffff1611151515612ba457600080fd5b8160026000836000191660001916815260200190815260200160002060000160008282829054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff160192506101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055508177ffffffffffffffffffffffffffffffffffffffffffffffff1660026000836000191660001916815260200190815260200160002060000160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1610151515612cb457fe5b8263ffffffff168473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f283bcbed58779cdfe40c216a69673863430a43dbf7fe557730c0498890e5512685604051808277ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a45050505050565b60008060008060418551141515612d7157600080fd5b6020850151925060408501519150606085015160001a9050601b8160ff161015612d9c57601b810190505b601b8160ff161480612db15750601c8160ff16145b1515612dbc57600080fd5b600186828585604051600081526020016040526000604051602001526040518085600019166000191681526020018460ff1660ff16815260200183600019166000191681526020018260001916600019168152602001945050505050602060405160208103908084039060008661646e5a03f11515612e3a57600080fd5b505060206040510351935060008473ffffffffffffffffffffffffffffffffffffffff1614151515612e6b57600080fd5b83935050505092915050565b6000612e81613835565b6000612e8e878787611de5565b92506002600084600019166000191681526020019081526020016000206040805190810160405290816000820160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff168152505091506000826020015163ffffffff16111515612f5957600080fd5b816000015177ffffffffffffffffffffffffffffffffffffffffffffffff168477ffffffffffffffffffffffffffffffffffffffffffffffff1611151515612fa057600080fd5b8377ffffffffffffffffffffffffffffffffffffffffffffffff1660056000856000191660001916815260200190815260200160002060009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff161115151561302257600080fd5b600260008460001916600019168152602001908152602001600020600080820160006101000a81549077ffffffffffffffffffffffffffffffffffffffffffffffff02191690556000820160186101000a81549063ffffffff02191690555050600360008460001916600019168152602001908152602001600020600080820160006101000a81549077ffffffffffffffffffffffffffffffffffffffffffffffff02191690556000820160186101000a81549063ffffffff0219169055505060056000846000191660001916815260200190815260200160002060009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1684039050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018277ffffffffffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b151561320d57600080fd5b6102c65a03f1151561321e57600080fd5b50505060405180519050151561323357600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88868560000151036000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018277ffffffffffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b151561332057600080fd5b6102c65a03f1151561333157600080fd5b50505060405180519050151561334657600080fd5b8463ffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f5f32714de7650ec742b858687d8db145623b99b0748db73df3ffc4d718867a8d8785604051808377ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020018277ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a450505050505050565b600080823b905060008111915050919050565b600033905090565b60008068056bc75e2d631000008377ffffffffffffffffffffffffffffffffffffffffffffffff161115151561347b57600080fd5b439150613489858584611de5565b9050600060026000836000191660001916815260200190815260200160002060000160009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff161415156134f657600080fd5b600060026000836000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff1614151561353957600080fd5b600060036000836000191660001916815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff1614151561357c57600080fd5b60408051908101604052808477ffffffffffffffffffffffffffffffffffffffffffffffff1681526020018363ffffffff1681525060026000836000191660001916815260200190815260200160002060008201518160000160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160186101000a81548163ffffffff021916908363ffffffff1602179055509050508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f986876e67d288f7b8bc5229976a1d5710be919feb66d2e1aec1bf3eadebba20785604051808277ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a35050505050565b600080828401519050806c01000000000000000000000000900491505092915050565b600080828401519050807c0100000000000000000000000000000000000000000000000000000000900491505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561377757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040805190810160405280600077ffffffffffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff16815250905600a165627a7a72305820aa3cc5da38b243f9f83935d30d7bc085ccb5da91ba9aa197beac031e36b81cab0029";
    public static final String FUNC_TOPUP = "topUp";

    public static final String FUNC_CHALLENGE_PERIOD = "challenge_period";

    public static final String FUNC_GETCHANNELINFO = "getChannelInfo";

    public static final String FUNC_EXTRACTBALANCEPROOFSIGNATURE = "extractBalanceProofSignature";

    public static final String FUNC_COOPERATIVECLOSE = "cooperativeClose";

    public static final String FUNC_EXTRACTCLOSINGSIGNATURE = "extractClosingSignature";

    public static final String FUNC_REMOVETRUSTEDCONTRACTS = "removeTrustedContracts";

    public static final String FUNC_WITHDRAWN_BALANCES = "withdrawn_balances";

    public static final String FUNC_UNCOOPERATIVECLOSE = "uncooperativeClose";

    public static final String FUNC_CLOSE = "close";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_SETTLE = "settle";

    public static final String FUNC_CHANNEL_DEPOSIT_BUGBOUNTY_LIMIT = "channel_deposit_bugbounty_limit";

    public static final String FUNC_CLOSING_REQUESTS = "closing_requests";

    public static final String FUNC_TOPUPDELEGATE = "topUpDelegate";

    public static final String FUNC_CHANNELS = "channels";

    public static final String FUNC_GETKEY = "getKey";

    public static final String FUNC_ADDTRUSTEDCONTRACTS = "addTrustedContracts";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_TRUSTED_CONTRACTS = "trusted_contracts";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_CREATECHANNEL = "createChannel";

    public static final String FUNC_TOKENFALLBACK = "tokenFallback";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TOKEN = "token";

    public static final String FUNC_CREATECHANNELDELEGATE = "createChannelDelegate";

    public static final Event CHANNELCREATED_EVENT = new Event("ChannelCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint192>() {}));
    ;

    public static final Event CHANNELTOPPEDUP_EVENT = new Event("ChannelToppedUp", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint32>(true) {}, new TypeReference<Uint192>() {}));
    ;

    public static final Event CHANNELCLOSEREQUESTED_EVENT = new Event("ChannelCloseRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint32>(true) {}, new TypeReference<Uint192>() {}));
    ;

    public static final Event CHANNELSETTLED_EVENT = new Event("ChannelSettled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint32>(true) {}, new TypeReference<Uint192>() {}, new TypeReference<Uint192>() {}));
    ;

    public static final Event CHANNELWITHDRAW_EVENT = new Event("ChannelWithdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint32>(true) {}, new TypeReference<Uint192>() {}));
    ;

    public static final Event TRUSTEDCONTRACT_EVENT = new Event("TrustedContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected RaidenMicroTransferChannels(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected RaidenMicroTransferChannels(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected RaidenMicroTransferChannels(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected RaidenMicroTransferChannels(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> topUp(String _receiver_address, BigInteger _open_block_number, BigInteger _added_deposit) {
        final Function function = new Function(
                FUNC_TOPUP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_receiver_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_open_block_number), 
                new org.web3j.abi.datatypes.generated.Uint192(_added_deposit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> challenge_period() {
        final Function function = new Function(FUNC_CHALLENGE_PERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger>> getChannelInfo(String _sender_address, String _receiver_address, BigInteger _open_block_number) {
        final Function function = new Function(FUNC_GETCHANNELINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sender_address), 
                new org.web3j.abi.datatypes.Address(_receiver_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_open_block_number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint192>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint192>() {}, new TypeReference<Uint192>() {}));
        return new RemoteCall<Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<String> extractBalanceProofSignature(String _receiver_address, BigInteger _open_block_number, BigInteger _balance, byte[] _balance_msg_sig) {
        final Function function = new Function(FUNC_EXTRACTBALANCEPROOFSIGNATURE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_receiver_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_open_block_number), 
                new org.web3j.abi.datatypes.generated.Uint192(_balance), 
                new org.web3j.abi.datatypes.DynamicBytes(_balance_msg_sig)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> cooperativeClose(String _receiver_address, BigInteger _open_block_number, BigInteger _balance, byte[] _balance_msg_sig, byte[] _closing_sig) {
        final Function function = new Function(
                FUNC_COOPERATIVECLOSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_receiver_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_open_block_number), 
                new org.web3j.abi.datatypes.generated.Uint192(_balance), 
                new org.web3j.abi.datatypes.DynamicBytes(_balance_msg_sig), 
                new org.web3j.abi.datatypes.DynamicBytes(_closing_sig)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> extractClosingSignature(String _sender_address, BigInteger _open_block_number, BigInteger _balance, byte[] _closing_sig) {
        final Function function = new Function(FUNC_EXTRACTCLOSINGSIGNATURE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sender_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_open_block_number), 
                new org.web3j.abi.datatypes.generated.Uint192(_balance), 
                new org.web3j.abi.datatypes.DynamicBytes(_closing_sig)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> removeTrustedContracts(List<String> _trusted_contracts) {
        final Function function = new Function(
                FUNC_REMOVETRUSTEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_trusted_contracts, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> withdrawn_balances(byte[] param0) {
        final Function function = new Function(FUNC_WITHDRAWN_BALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint192>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> uncooperativeClose(String _receiver_address, BigInteger _open_block_number, BigInteger _balance) {
        final Function function = new Function(
                FUNC_UNCOOPERATIVECLOSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_receiver_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_open_block_number), 
                new org.web3j.abi.datatypes.generated.Uint192(_balance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> close() {
        final Function function = new Function(
                FUNC_CLOSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> version() {
        final Function function = new Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> settle(String _receiver_address, BigInteger _open_block_number) {
        final Function function = new Function(
                FUNC_SETTLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_receiver_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_open_block_number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> channel_deposit_bugbounty_limit() {
        final Function function = new Function(FUNC_CHANNEL_DEPOSIT_BUGBOUNTY_LIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> closing_requests(byte[] param0) {
        final Function function = new Function(FUNC_CLOSING_REQUESTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint192>() {}, new TypeReference<Uint32>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> topUpDelegate(String _sender_address, String _receiver_address, BigInteger _open_block_number, BigInteger _added_deposit) {
        final Function function = new Function(
                FUNC_TOPUPDELEGATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sender_address), 
                new org.web3j.abi.datatypes.Address(_receiver_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_open_block_number), 
                new org.web3j.abi.datatypes.generated.Uint192(_added_deposit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> channels(byte[] param0) {
        final Function function = new Function(FUNC_CHANNELS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint192>() {}, new TypeReference<Uint32>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<byte[]> getKey(String _sender_address, String _receiver_address, BigInteger _open_block_number) {
        final Function function = new Function(FUNC_GETKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sender_address), 
                new org.web3j.abi.datatypes.Address(_receiver_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_open_block_number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> addTrustedContracts(List<String> _trusted_contracts) {
        final Function function = new Function(
                FUNC_ADDTRUSTEDCONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_trusted_contracts, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isOwner() {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> trusted_contracts(String param0) {
        final Function function = new Function(FUNC_TRUSTED_CONTRACTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> withdraw(BigInteger _open_block_number, BigInteger _balance, byte[] _balance_msg_sig) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_open_block_number), 
                new org.web3j.abi.datatypes.generated.Uint192(_balance), 
                new org.web3j.abi.datatypes.DynamicBytes(_balance_msg_sig)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createChannel(String _receiver_address, BigInteger _deposit) {
        final Function function = new Function(
                FUNC_CREATECHANNEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_receiver_address), 
                new org.web3j.abi.datatypes.generated.Uint192(_deposit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tokenFallback(String _sender_address, BigInteger _deposit, byte[] _data) {
        final Function function = new Function(
                FUNC_TOKENFALLBACK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sender_address), 
                new org.web3j.abi.datatypes.generated.Uint256(_deposit), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> token() {
        final Function function = new Function(FUNC_TOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> createChannelDelegate(String _sender_address, String _receiver_address, BigInteger _deposit) {
        final Function function = new Function(
                FUNC_CREATECHANNELDELEGATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sender_address), 
                new org.web3j.abi.datatypes.Address(_receiver_address), 
                new org.web3j.abi.datatypes.generated.Uint192(_deposit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<ChannelCreatedEventResponse> getChannelCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANNELCREATED_EVENT, transactionReceipt);
        ArrayList<ChannelCreatedEventResponse> responses = new ArrayList<ChannelCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChannelCreatedEventResponse typedResponse = new ChannelCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._sender_address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._receiver_address = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._deposit = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChannelCreatedEventResponse> channelCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChannelCreatedEventResponse>() {
            @Override
            public ChannelCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHANNELCREATED_EVENT, log);
                ChannelCreatedEventResponse typedResponse = new ChannelCreatedEventResponse();
                typedResponse.log = log;
                typedResponse._sender_address = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._receiver_address = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._deposit = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChannelCreatedEventResponse> channelCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANNELCREATED_EVENT));
        return channelCreatedEventFlowable(filter);
    }

    public List<ChannelToppedUpEventResponse> getChannelToppedUpEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANNELTOPPEDUP_EVENT, transactionReceipt);
        ArrayList<ChannelToppedUpEventResponse> responses = new ArrayList<ChannelToppedUpEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChannelToppedUpEventResponse typedResponse = new ChannelToppedUpEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._sender_address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._receiver_address = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._open_block_number = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse._added_deposit = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChannelToppedUpEventResponse> channelToppedUpEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChannelToppedUpEventResponse>() {
            @Override
            public ChannelToppedUpEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHANNELTOPPEDUP_EVENT, log);
                ChannelToppedUpEventResponse typedResponse = new ChannelToppedUpEventResponse();
                typedResponse.log = log;
                typedResponse._sender_address = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._receiver_address = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._open_block_number = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse._added_deposit = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChannelToppedUpEventResponse> channelToppedUpEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANNELTOPPEDUP_EVENT));
        return channelToppedUpEventFlowable(filter);
    }

    public List<ChannelCloseRequestedEventResponse> getChannelCloseRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANNELCLOSEREQUESTED_EVENT, transactionReceipt);
        ArrayList<ChannelCloseRequestedEventResponse> responses = new ArrayList<ChannelCloseRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChannelCloseRequestedEventResponse typedResponse = new ChannelCloseRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._sender_address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._receiver_address = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._open_block_number = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse._balance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChannelCloseRequestedEventResponse> channelCloseRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChannelCloseRequestedEventResponse>() {
            @Override
            public ChannelCloseRequestedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHANNELCLOSEREQUESTED_EVENT, log);
                ChannelCloseRequestedEventResponse typedResponse = new ChannelCloseRequestedEventResponse();
                typedResponse.log = log;
                typedResponse._sender_address = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._receiver_address = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._open_block_number = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse._balance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChannelCloseRequestedEventResponse> channelCloseRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANNELCLOSEREQUESTED_EVENT));
        return channelCloseRequestedEventFlowable(filter);
    }

    public List<ChannelSettledEventResponse> getChannelSettledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANNELSETTLED_EVENT, transactionReceipt);
        ArrayList<ChannelSettledEventResponse> responses = new ArrayList<ChannelSettledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChannelSettledEventResponse typedResponse = new ChannelSettledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._sender_address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._receiver_address = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._open_block_number = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse._balance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._receiver_tokens = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChannelSettledEventResponse> channelSettledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChannelSettledEventResponse>() {
            @Override
            public ChannelSettledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHANNELSETTLED_EVENT, log);
                ChannelSettledEventResponse typedResponse = new ChannelSettledEventResponse();
                typedResponse.log = log;
                typedResponse._sender_address = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._receiver_address = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._open_block_number = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse._balance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._receiver_tokens = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChannelSettledEventResponse> channelSettledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANNELSETTLED_EVENT));
        return channelSettledEventFlowable(filter);
    }

    public List<ChannelWithdrawEventResponse> getChannelWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANNELWITHDRAW_EVENT, transactionReceipt);
        ArrayList<ChannelWithdrawEventResponse> responses = new ArrayList<ChannelWithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChannelWithdrawEventResponse typedResponse = new ChannelWithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._sender_address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._receiver_address = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._open_block_number = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse._withdrawn_balance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChannelWithdrawEventResponse> channelWithdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChannelWithdrawEventResponse>() {
            @Override
            public ChannelWithdrawEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHANNELWITHDRAW_EVENT, log);
                ChannelWithdrawEventResponse typedResponse = new ChannelWithdrawEventResponse();
                typedResponse.log = log;
                typedResponse._sender_address = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._receiver_address = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._open_block_number = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse._withdrawn_balance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChannelWithdrawEventResponse> channelWithdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANNELWITHDRAW_EVENT));
        return channelWithdrawEventFlowable(filter);
    }

    public List<TrustedContractEventResponse> getTrustedContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRUSTEDCONTRACT_EVENT, transactionReceipt);
        ArrayList<TrustedContractEventResponse> responses = new ArrayList<TrustedContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TrustedContractEventResponse typedResponse = new TrustedContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._trusted_contract_address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._trusted_status = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TrustedContractEventResponse> trustedContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TrustedContractEventResponse>() {
            @Override
            public TrustedContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRUSTEDCONTRACT_EVENT, log);
                TrustedContractEventResponse typedResponse = new TrustedContractEventResponse();
                typedResponse.log = log;
                typedResponse._trusted_contract_address = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._trusted_status = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TrustedContractEventResponse> trustedContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRUSTEDCONTRACT_EVENT));
        return trustedContractEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    @Deprecated
    public static RaidenMicroTransferChannels load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new RaidenMicroTransferChannels(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static RaidenMicroTransferChannels load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RaidenMicroTransferChannels(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RaidenMicroTransferChannels load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new RaidenMicroTransferChannels(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static RaidenMicroTransferChannels load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new RaidenMicroTransferChannels(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<RaidenMicroTransferChannels> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _token_address, BigInteger _challenge_period, List<String> _trusted_contracts) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_token_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_challenge_period), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_trusted_contracts, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(RaidenMicroTransferChannels.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<RaidenMicroTransferChannels> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _token_address, BigInteger _challenge_period, List<String> _trusted_contracts) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_token_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_challenge_period), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_trusted_contracts, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(RaidenMicroTransferChannels.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<RaidenMicroTransferChannels> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _token_address, BigInteger _challenge_period, List<String> _trusted_contracts) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_token_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_challenge_period), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_trusted_contracts, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(RaidenMicroTransferChannels.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<RaidenMicroTransferChannels> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _token_address, BigInteger _challenge_period, List<String> _trusted_contracts) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_token_address), 
                new org.web3j.abi.datatypes.generated.Uint32(_challenge_period), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_trusted_contracts, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(RaidenMicroTransferChannels.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ChannelCreatedEventResponse {
        public Log log;

        public String _sender_address;

        public String _receiver_address;

        public BigInteger _deposit;
    }

    public static class ChannelToppedUpEventResponse {
        public Log log;

        public String _sender_address;

        public String _receiver_address;

        public BigInteger _open_block_number;

        public BigInteger _added_deposit;
    }

    public static class ChannelCloseRequestedEventResponse {
        public Log log;

        public String _sender_address;

        public String _receiver_address;

        public BigInteger _open_block_number;

        public BigInteger _balance;
    }

    public static class ChannelSettledEventResponse {
        public Log log;

        public String _sender_address;

        public String _receiver_address;

        public BigInteger _open_block_number;

        public BigInteger _balance;

        public BigInteger _receiver_tokens;
    }

    public static class ChannelWithdrawEventResponse {
        public Log log;

        public String _sender_address;

        public String _receiver_address;

        public BigInteger _open_block_number;

        public BigInteger _withdrawn_balance;
    }

    public static class TrustedContractEventResponse {
        public Log log;

        public String _trusted_contract_address;

        public Boolean _trusted_status;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }
}
